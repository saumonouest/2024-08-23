<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
		<!-- 사용자 정의 클래스 등록 -->
		<context:component-scan base-package="com.sist.*"/>
		<!-- 선별적인 메모리 할당
			 스프링 관리 요청 : DAO, Manager, Service ..
			 @Component 
			 @Repository
			 @Service
			 @Controller
			 @RestController
			 @ControllerAdvice
			 @Configuration
		-->
		<!-- AOP -->
		<aop:aspectj-autoproxy/>
		<!-- ViewResolver 등록 -->
		<!-- DispatcherServlet <==========> WebApplicationContext
					|								  |
			 요청을 받아서 결과값 전송			등록된 클래스 관리 (컨테이너)
			 1) 클래스 관리 요청 => DispatcherServlet이 XML의 경로명을 받아서
			  <init-param>		 WebApplicationContext로 전송 => 등록 클래스 메모리 할당 후 
		         <param-name>contextConfigLocation</param-name>
		         <param-value>/WEB-INF/config/application-*.xml</param-value>
		      </init-param> 
		      
		     2) Model 클래스를 찾아주는 역할
		     	=========== 구분자 
		     	1. @Controller
		     	2. @RestController
		     	=================== 클래스 구분
		     	1. @GetMapping()
		     	2. @PostMapping()
		     	3. @RequestMapping() => PutMapping(), DeleteMapping()
		     	==================== 메소드 구분
		     	=> HandlerMapping (자동 생성)
		     	web.xml에 등록하면 자동 생성
		     	
		     3) View(JSP)를 찾아주는 역할 => ViewResolver
		     	=> 경로명 / 확장자 전송 => 자바 전용이 아니다
		     	   = prefix, suffix
		     	   = 확장자가 존재 => 화면 이동시에 .jsp를 붙이지 않는다
		     	   
		  => Mapper : 1개 테이블 1개 제어
		  			  BoardDAO / ReplyDAO => @AutoWired
		  
		  => Mapper가 여러개를 모아서 처리 => Service
		  			  => BoardDAO / ReplyDAO => BoardService
		  	 => 요청 => Service => DAO => 오라클
		  	 	응답 <= Service <= DAO <= 오라클
		  	 	
		  	 	
		  셋팅 
		  	1. 라이브러리 추가 : Maven / Gradle - Spring-Boot / Kotlin
		  			|		  ㄴSpring Framework
		  			|		    => 라이브러리 관리 / 프로젝트 관리 / 배포 관리 / 버전 관리 
		  			| 
		  			pom.xml => mvnrepository.com
		  					=> 라이브러리가 없는 경우 => lib => <systemPath>
		  					
		  	2. Spring5 => jdk 1.8 이상
		  	3. 클래스 등록
		  		=> application-context.xml
		  		=> application-datasource.xml
		  		=> application-security.xml
		  		=> application-task.xml
		  		=> application-websocket.xml
		  		
		  	4. Mapper 등록 (MyBatis)
		  	5. Model을 만들어서 요청에 대한 처리
		  		= 요청에 대한 화면 이동
		  			= @Controller
		  				return "경로명/파일명" => JSP 파일에 request를 전송
		  									   결과값을 전송
		  									   request.setAttribute()
		  									   model.addAttribute()
		  									   => forward
		  									   
		  				return "redirect:~~" => 이미 만들어진 화면이동
		  										request가 초기화
		  										_ok.do
		  										sendRedirect
		  		= 요청에 대한 데이터만 전송
		  			= @RestController => 자바스크립트나 다른 언어와 연동
		  								 ========================
		  								 ㄴJSON
		  				=> 일반 문자열 / <script>
		  				=> JSON : 자바스크립트 객체 표현법
		  				   자바 / 자바스크립트 호환
		  				   ~VO => {}(Object)
		  				   List => [](Array)
		  				
		  	6. 응답을 받아서 처리 => JSP
		  	   ============== Ajax / Vue / React
		  	   Vue 
		  	   가벼움 / 양방향 / React보다 간단(어려움) => jsx
		  	   					=> React-Query / Redux / Mobx
		  	   					
		  	=> 처리 메소드
		  	   리턴형
		  	   매개변수 : 사용자가 전송한 값을 받는다
		  	   			detail.do?no=1
		  	   					  ==
		  	   			(int no)  |
		  	   				 == === 일치 
		  	   			
		  	   			detail.do?no=1&fd=aaa&page=1
		  	   					  ==   ==     ====
		  	   			(int no, String fd, int page)
		  	   			(BoardVO vo) => insert/update
		  	   			 ========== 커맨드 객체
		  	   			 | => <input type=text name=name>
		  	   			 							==== 반드시 VO 안에 setter로 제작되어 있어야 한다
		  	   			 
		  	   			 => 내장 객체 
		  	   			 Cookie : 저장 => HttpServletResponse (다운로드시)
		  	   			 		  읽기 => HttpServletRequest
		  	   			 데이터 전송 : Model
		  	   			 로그인 => HttpSession
		  	   			 Redirect => 데이터 전송 => RedirectAttributes
		  	   			 return "redirect:detail.do?no="+no+"&curpage="+page
		  	   			 => ra.addAttribute("no",no)
		  	   			 => ra.addAttribute("curpage",page)
		  	   		=> 한글 변환은 web.xml에 등록
		  	   			 
			   메소드명 : 개발자 마음
			   
			   => /login/admin/1234 => react ...	  	   			
		 -->
		 <!--  
		 	return "main/main";
		 -->
		 <bean id="viewResolver"
		 	class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		 	p:prefix="/"
		 	p:suffix=".jsp"
		 />
		 <!--  
		 	/main/main.jsp => JSP를 찾는다
		   ==		   ===
		   접두어		  접미어
		 -->
</beans>
















