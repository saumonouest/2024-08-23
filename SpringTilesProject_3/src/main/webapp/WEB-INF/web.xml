<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

   <!-- Controller 등록
       DispatcherServlet : controller
          => 구분 : Front Controller : 요청을 받는 역할
       사용자 정의 => ~Controller (Model) : 요청에 대한 처리 역할
       화면 : JSP / HTML
                 =====
                 ThymeLeaf / React / NextJS
       
       1. Servlet은 구동 => 동작 (Tomcat에 의해 동작)
                           ======== web.xml, server.xml
          = 업체 => 분석해서 발표
             |=> web.xml => server.xml => Model => Mapper => DAO => JSP
                     |=> servlet이 등록
                          =======
                             |=> DispatcherServlet   : Spring
                             |=> FilterDispatcher   : 스트럿츠
    -->
    <!-- 
                list.do
       사용자 요청 ========= DispatcherServlet ======== HandlerMapping
                                           ==============
                                                 |=> Model에서   @RequestMapping   : GET  + POST를 동시에 처리
                                                        |      @GetMapping      : GET  + SELECT
                                                        |      @PostMapping   : POST + INSERT
                                                        |      @PutMapping      : UPDATE
                                                        |      @DeleteMapping   : DELETE
                                                        |
                                                        |=> Model
                                              개발자 요청 처리
                                                 => return "main/main" => .jsp는 이미 등록이 되어있다.
                                                          ========= 확장자 없이 파일 명만 기재
                                                                => forward 기법   : request를 전송
                                                 => return "redirect:list.do"
                                                      |         => sendRedirect   : request를 초기화 (보낼 데이터가 없이 이전의 화면으로 이동)
                                                      |               => _ok.do, before.do (cookie)
                                                      |
                                                 ViewResolver : JSP를 찾아서 Request를 전송하는 역할
                                                      |=> request를 전송
                                                    View => JSP
                                           
                                           요청 처리 : Model
                                                    =====
                                                    => Model, VO, DAO, Service, Manager
                                                       => 원래는 Model에서 전부 코드가 작성되지만
                                                          재사용, 유지 보수, 수정을 용이하게 하기 위해 파일을 나눔
                                           화면 출력 : JSP
                                           
                                           JSP   : Model 1 방식 => 간단하다.
                                                 1. 재사용이 불가능
                                                 2. 혼자 전부 작업을 해야 함
                                                 3. 보안이 취약하다.
                                                 
                                           MVC   : Model 2 방식 => 복잡하다.   
                                                 1. 분산 작업 가능
                                                 2. 재사용 가능
                                                 3. 보안이 뛰어남
   *** Model 1 VS Model 2 차이점 ***
   *** Overriding vs Overloading ***
   *** GET vs POST ***
                                                       
     -->

<!--       <init-param>
         <param-name>contextConfigLocation</param-name>                      ******* 이부분과
         <param-value>/WEB-INF/config/application-*.xml</param-value>
 -->
         <!-- 
            public class DispatcherServlet extends HttpServlet {
               public void init(ServletConfig config) {
                  
                  1. web,xml에 등록된 데이터 읽기
                  
                  String xml = config.getInitParameter("contextConfigLocation"); ******* 이 부분이 동일해야 함
                  ApplicationContext app = new ClassPathApplicationContext(xml)
                     => 등록된 클래스를 메모리 할당.
               }
            
               public void service(HttpServletRequest request, HttpServletResponse response) {
                  사용자 요청을 받아서 처리된 결과를 JSP로 전송한다.
               }
               
               public void destory(){
                  Servlet 메모리 해제 => 새로고침, 화면 변경의 경우에 해당.
               }
            
            }
          -->
   <servlet>
      <servlet-name>dispatcher</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

<!--       XML로 환경 설정이 된 경우 사용  -->
      <init-param>
         <param-name>contextConfigLocation</param-name>
         <param-value>/WEB-INF/config/application-*.xml</param-value>
      </init-param> 

      <!-- 스프링 5 : 자바로 환경설정 -->
<!--
      <init-param>
        <param-name>contextClass</param-name>
        <param-value>
         org.springframework.web.context.support.AnnotationConfigWebApplicationContext
        </param-value>
      </init-param>
      <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>com.sist.config.MvcConfig</param-value>
      </init-param>
-->
   </servlet>
      
   <servlet-mapping>
      <servlet-name>dispatcher</servlet-name>
      <url-pattern>*.do</url-pattern>
   </servlet-mapping>
   
   <!--  한글 변환  -->
   <filter>
      <filter-name>encodingFilter</filter-name>
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      <init-param>
        <param-name>encoding</param-name>
        <param-value>UTF-8</param-value>
      </init-param>
      <init-param>
        <param-name>forceEncoding</param-name>
        <param-value>true</param-value>
      </init-param>
    </filter>
    <filter-mapping>
      <filter-name>encodingFilter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>
   <!-- 에러별 처리 -->
   <!-- 보안 등록 : Security : 권한부여 , 자동 로그인 , 카카오,네이버를 이용한 로그인 -->

</web-app>
